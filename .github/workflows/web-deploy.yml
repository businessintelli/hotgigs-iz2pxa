name: Web Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: web-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  VITE_API_URL: ${{ secrets.VITE_API_URL }}
  VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
  VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm@8.6.0

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: cd src/web && pnpm install --frozen-lockfile

      - name: Type check
        run: cd src/web && pnpm type-check

      - name: Lint code
        run: cd src/web && pnpm lint

      - name: Run unit tests
        run: cd src/web && pnpm test:coverage

      - name: Run E2E tests
        run: cd src/web && pnpm e2e

      - name: Build application
        run: cd src/web && pnpm build

      - name: Analyze bundle size
        run: cd src/web && pnpm analyze
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: src/web/dist

  docker:
    name: Docker Build
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: src/web/dist

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/web.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/web:latest
            ghcr.io/${{ github.repository }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=${{ env.VITE_API_URL }}
            VITE_SUPABASE_URL=${{ env.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ env.VITE_SUPABASE_ANON_KEY }}

  deploy:
    name: Deploy
    needs: docker
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy src/web/dist --project-name hotgigs-web --branch main

      - name: Purge Cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}'

      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -s -f "https://hotgigs.pages.dev/health"; then
              exit 0
            fi
            sleep 10
          done
          exit 1

      - name: Performance check
        run: |
          response_time=$(curl -s -w "%{time_total}" -o /dev/null "https://hotgigs.pages.dev")
          if (( $(echo "$response_time > 2" | bc -l) )); then
            echo "Response time too high: $response_time seconds"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const message = status === 'success' 
              ? '🚀 Deployment successful: https://hotgigs.pages.dev'
              : '❌ Deployment failed'
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            })