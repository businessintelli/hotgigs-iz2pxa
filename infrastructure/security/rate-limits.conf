# Rate Limiting Configuration for HotGigs Platform
# Version: 1.25.0

# Define memory zones for rate limiting
limit_req_zone $binary_remote_addr zone=jobs:10m rate=1000r/h;
limit_req_zone $binary_remote_addr zone=applications:10m rate=2000r/h;
limit_req_zone $binary_remote_addr zone=candidates:10m rate=1000r/h;
limit_req_zone $binary_remote_addr zone=interviews:10m rate=500r/h;
limit_req_zone $binary_remote_addr zone=analytics:10m rate=100r/h;

# Define whitelist for internal networks
geo $whitelist {
    default 0;
    10.0.0.0/8 1;      # Internal network
    172.16.0.0/12 1;   # Docker network
    192.168.0.0/16 1;  # Local network
}

# Custom variables
map $whitelist $limit_rate {
    0     $binary_remote_addr;
    1     "";
}

# Rate limit status code
limit_req_status 429;

# Define rate limit response headers
add_header X-RateLimit-Limit $limit_req_zone_rate;
add_header X-RateLimit-Remaining $limit_req_zone_free;
add_header X-RateLimit-Reset $limit_req_zone_reset;

# Jobs API rate limiting
location /api/jobs {
    limit_req zone=jobs burst=50 nodelay;
    limit_req_log_level warn;
    
    # Skip rate limiting for whitelisted IPs
    if ($whitelist = 1) {
        set $limit_rate "";
    }
    
    proxy_pass http://backend;
    
    # Error response for rate limit exceeded
    error_page 429 = @rate_limit_exceeded;
}

# Applications API rate limiting
location /api/applications {
    limit_req zone=applications burst=100 nodelay;
    limit_req_log_level warn;
    
    if ($whitelist = 1) {
        set $limit_rate "";
    }
    
    proxy_pass http://backend;
    error_page 429 = @rate_limit_exceeded;
}

# Candidates API rate limiting
location /api/candidates {
    limit_req zone=candidates burst=50 nodelay;
    limit_req_log_level warn;
    
    if ($whitelist = 1) {
        set $limit_rate "";
    }
    
    proxy_pass http://backend;
    error_page 429 = @rate_limit_exceeded;
}

# Interviews API rate limiting
location /api/interviews {
    limit_req zone=interviews burst=25 nodelay;
    limit_req_log_level warn;
    
    if ($whitelist = 1) {
        set $limit_rate "";
    }
    
    proxy_pass http://backend;
    error_page 429 = @rate_limit_exceeded;
}

# Analytics API rate limiting
location /api/analytics {
    limit_req zone=analytics burst=10 nodelay;
    limit_req_log_level warn;
    
    if ($whitelist = 1) {
        set $limit_rate "";
    }
    
    proxy_pass http://backend;
    error_page 429 = @rate_limit_exceeded;
}

# Custom error response for rate limit exceeded
location @rate_limit_exceeded {
    default_type application/json;
    return 429 '{"success":false,"error":{"code":"FORBIDDEN","message":"Too many requests, please try again later","details":{"retryAfter":$limit_req_zone_reset,"limit":$limit_req_zone_rate}}}';
}

# Monitoring and logging configuration
log_format rate_limit '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     'zone=$limit_req_zone rate=$limit_req_zone_rate';

access_log /var/log/nginx/rate_limit.log rate_limit if=$limit_req_zone_free;

# Health check endpoint (excluded from rate limiting)
location /health {
    access_log off;
    return 200 "OK";
}