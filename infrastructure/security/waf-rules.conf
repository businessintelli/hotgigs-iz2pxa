# HotGigs Platform WAF Rules Configuration
# Version: 1.0.0

# Load ModSecurity module and OWASP Core Rule Set
load_module modules/ngx_http_modsecurity_module.so;
include /etc/nginx/owasp-modsecurity-crs/crs-setup.conf;
include /etc/nginx/owasp-modsecurity-crs/rules/*.conf;

# Global ModSecurity Configuration
modsecurity on;
modsecurity_rules_file /etc/nginx/modsec/main.conf;
modsecurity_transaction_id_header X-Request-ID;

# Enable Rule Engine and Logging
SecRuleEngine On;
SecRequestBodyAccess On;
SecResponseBodyAccess On;
SecAuditEngine RelevantOnly;
SecAuditLogParts ABCFHZ;
SecAuditLog /var/log/nginx/modsec_audit.log;
SecDebugLog /var/log/nginx/modsec_debug.log;
SecDebugLogLevel 1;

# Performance Tuning
SecRequestBodyLimit 13107200;
SecRequestBodyNoFilesLimit 131072;
SecRequestBodyInMemoryLimit 131072;
SecResponseBodyLimit 1048576;
SecResponseBodyMimeType text/plain text/html application/json;

# Import Rate Limiting Zones
include /etc/nginx/security/rate-limits.conf;

# CORS Configuration
include /etc/nginx/security/cors-policy.conf;

# Base Security Rules
SecRule REQUEST_HEADERS:Content-Type "^(?:application/json|text/plain|multipart/form-data)" \
    "id:1000,phase:1,pass,nolog,ctl:requestBodyProcessor=JSON"

# SQL Injection Protection
SecRule REQUEST_FILENAME|ARGS|ARGS_NAMES|REQUEST_HEADERS|XML:/*|!REQUEST_HEADERS:Referer "@detectSQLi" \
    "id:981231,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    log,\
    msg:'SQL Injection Attack Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    setvar:'tx.sql_injection_score=+%{tx.critical_anomaly_score}'"

# XSS Protection
SecRule REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer|ARGS_NAMES|ARGS|XML:/* "@detectXSS" \
    "id:981133,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,\
    log,\
    msg:'XSS Attack Detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    setvar:'tx.xss_score=+%{tx.critical_anomaly_score}'"

# Path Traversal Protection
SecRule REQUEST_URI|REQUEST_HEADERS:X-Original-URL|REQUEST_HEADERS:X-Rewrite-URL "@validatePath" \
    "id:981244,\
    phase:1,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:normalizePathWin,\
    log,\
    msg:'Path Traversal Attack',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL'"

# API-Specific Protection Rules
# Jobs API Protection
SecRule REQUEST_URI "@beginsWith /api/jobs" \
    "id:2000,\
    phase:1,\
    pass,\
    nolog,\
    chain"
    SecRule REQUEST_METHOD "!@within GET POST PUT DELETE" \
        "t:none,\
        block,\
        msg:'Invalid HTTP method for Jobs API',\
        status:405"

# Applications API Protection
SecRule REQUEST_URI "@beginsWith /api/applications" \
    "id:2001,\
    phase:1,\
    pass,\
    nolog,\
    chain"
    SecRule REQUEST_METHOD "!@within GET POST PUT" \
        "t:none,\
        block,\
        msg:'Invalid HTTP method for Applications API',\
        status:405"

# File Upload Protection
SecRule FILES_NAMES "@rx .*\.(?:php|asp|aspx|jsp|exe|sh|bat|cmd)$" \
    "id:3000,\
    phase:2,\
    block,\
    msg:'Malicious File Upload Attempt',\
    severity:'CRITICAL',\
    status:403"

SecRule FILES "fileExtension" \
    "chain,\
    phase:2,\
    block,\
    msg:'Invalid File Type',\
    id:3001"
    SecRule TX:fileExtension "!@within pdf doc docx txt rtf" \
        "t:lowercase,\
        setvar:'tx.blocked_file=%{TX.0}'"

# Content Security Policy
add_header Content-Security-Policy "default-src 'self'; \
    script-src 'self' https://*.hotgigs.com; \
    style-src 'self' 'unsafe-inline'; \
    img-src 'self' data: https://*.hotgigs.com; \
    connect-src 'self' https://*.supabase.co; \
    frame-ancestors 'none';" always;

# Security Headers
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

# Error Handling
error_page 403 = @error403;
location @error403 {
    default_type application/json;
    return 403 '{"success":false,"error":{"code":"FORBIDDEN","message":"Access denied by security policy","details":null}}';
}

# Monitoring Integration
access_log /var/log/nginx/waf_access.log combined;
error_log /var/log/nginx/waf_error.log warn;

# Health Check Endpoint (Excluded from WAF)
location /health {
    access_log off;
    modsecurity off;
    return 200 "OK";
}

# Custom Error Responses
error_page 400 401 403 404 405 408 429 500 501 502 503 504 = @json_error;
location @json_error {
    internal;
    default_type application/json;
    return ${status} '{"success":false,"error":{"code":"ERROR_${status}","message":"${status_text}","details":null}}';
}