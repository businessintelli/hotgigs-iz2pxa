import { RATE_LIMIT_CONFIG } from '../../src/backend/config/security';

// Environment-specific allowed origins
const ALLOWED_ORIGINS = {
  production: ['https://*.hotgigs.com', 'https://*.supabase.co'],
  staging: ['https://*.staging.hotgigs.com', 'https://*.supabase.co'],
  development: ['http://localhost:*', 'https://*.supabase.co']
} as const;

// Maximum age for CORS preflight requests
const MAX_AGE = 3600;

// Current environment
const ENVIRONMENT = process.env.NODE_ENV || 'development';

/**
 * Validates origin against environment-specific patterns
 * @param origin - Origin to validate
 * @param environment - Current environment
 * @returns boolean indicating if origin is allowed
 */
function validateOrigin(origin: string, environment: keyof typeof ALLOWED_ORIGINS): boolean {
  const allowedPatterns = ALLOWED_ORIGINS[environment];
  
  return allowedPatterns.some(pattern => {
    const regexPattern = pattern
      .replace(/\./g, '\\.')
      .replace(/\*/g, '[a-zA-Z0-9-]+');
    return new RegExp(`^${regexPattern}$`).test(origin);
  });
}

/**
 * Generates environment-specific security headers
 * @param environment - Current environment
 * @returns Security headers configuration
 */
function generateSecurityHeaders(environment: string) {
  const baseHeaders = {
    'X-Frame-Options': 'DENY',
    'X-Content-Type-Options': 'nosniff',
    'X-XSS-Protection': '1; mode=block',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
    'Cross-Origin-Opener-Policy': 'same-origin',
    'Cross-Origin-Resource-Policy': 'same-site',
    'Cross-Origin-Embedder-Policy': 'require-corp'
  };

  const cspDirectives = [
    "default-src 'self'",
    `script-src 'self' https://*.hotgigs.com`,
    `style-src 'self' 'unsafe-inline'`,
    `img-src 'self' data: https://*.hotgigs.com`,
    `connect-src 'self' https://*.supabase.co`,
    "frame-ancestors 'none'"
  ];

  if (environment !== 'production') {
    cspDirectives.push("script-src-elem 'self' 'unsafe-inline'");
    cspDirectives.push("connect-src 'self' http://localhost:* https://*.supabase.co");
  }

  return {
    ...baseHeaders,
    'Content-Security-Policy': cspDirectives.join('; '),
    'Feature-Policy': "camera 'none'; microphone 'none'; geolocation 'none'",
    'Permissions-Policy': 'camera=(), microphone=(), geolocation=()'
  };
}

// Export comprehensive CORS configuration
export const CORS_CONFIG = {
  // Origin validation
  allowed_origins: ALLOWED_ORIGINS[ENVIRONMENT],
  
  // Allowed HTTP methods
  allowed_methods: [
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS',
    'PATCH'
  ],
  
  // Allowed request headers
  allowed_headers: [
    'Authorization',
    'Content-Type',
    'Origin',
    'Accept',
    'X-Requested-With',
    'X-API-Key',
    'X-Client-Version',
    'X-Request-ID'
  ],
  
  // Exposed response headers
  exposed_headers: [
    'Content-Length',
    'Content-Type',
    'X-Request-ID',
    'X-Rate-Limit-Remaining',
    'X-Rate-Limit-Reset'
  ],
  
  // Enable credentials
  allow_credentials: true,
  
  // Preflight request cache duration
  max_age: MAX_AGE,
  
  // Preflight response configuration
  preflight: {
    status: 204,
    cache_control: 'public, max-age=3600',
    vary: 'Origin, Access-Control-Request-Headers'
  },
  
  // Security headers
  security_headers: generateSecurityHeaders(ENVIRONMENT),
  
  // Rate limiting configuration
  rate_limiting: {
    enabled: true,
    max_requests: RATE_LIMIT_CONFIG.jobs.max,
    window_ms: RATE_LIMIT_CONFIG.jobs.windowMs,
    headers: true,
    skip_failed_requests: false,
    draft_polli_ratelimit_headers: true
  },
  
  // Origin validator function
  validateOrigin: (origin: string) => validateOrigin(origin, ENVIRONMENT)
} as const;