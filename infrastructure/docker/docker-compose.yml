version: "3.8"

services:
  web:
    build:
      context: ../..
      dockerfile: infrastructure/docker/web.Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_URL}
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./security/cors-policy.conf:/etc/nginx/security/cors-policy.conf:ro
      - ./security/rate-limits.conf:/etc/nginx/security/rate-limits.conf:ro
      - ./security/waf-rules.conf:/etc/nginx/security/waf-rules.conf:ro
      - ssl_certs:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: "10s"
        order: "start-first"
      resources:
        limits:
          cpus: "1"
          memory: "1G"
        reservations:
          cpus: "0.5"
          memory: "512M"
    networks:
      - hotgigs_network
    depends_on:
      backend:
        condition: "service_healthy"
    restart: unless-stopped

  backend:
    build:
      context: ../..
      dockerfile: infrastructure/docker/backend.Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DD_API_KEY=${DD_API_KEY}
      - DD_ENV=production
      - LOG_LEVEL=info
    volumes:
      - backend_node_modules:/app/node_modules
      - backend_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: "10s"
        order: "start-first"
      resources:
        limits:
          cpus: "2"
          memory: "2G"
        reservations:
          cpus: "1"
          memory: "1G"
    networks:
      - hotgigs_network
    depends_on:
      redis:
        condition: "service_healthy"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
    networks:
      - hotgigs_network
    restart: unless-stopped

volumes:
  backend_node_modules:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/hotgigs/node_modules
      o: bind
  backend_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/hotgigs/data
      o: bind
  redis_data:
    driver: local
  ssl_certs:
    driver: local
    driver_opts:
      type: none
      device: /etc/ssl/hotgigs
      o: bind

networks:
  hotgigs_network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      encrypted: "true"